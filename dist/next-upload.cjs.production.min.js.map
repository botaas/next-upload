{"version":3,"file":"next-upload.cjs.production.min.js","sources":["../src/utils/client.ts","../src/utils/keys.ts","../src/app/api/upload/s3/route.ts","../src/components/FileInput.tsx","../src/hooks/use-uploader.ts","../src/hooks/use-upload-files.tsx","../src/hooks/use-s3-upload.tsx","../src/hooks/use-presigned-upload.ts","../src/utils/private-files.ts","../src/utils/image-data.ts"],"sourcesContent":["import { S3Client } from '@aws-sdk/client-s3';\nimport { S3Config } from './config';\n\nexport function getClient(config: S3Config) {\n  const client = new S3Client({\n    credentials: {\n      accessKeyId: config.accessKeyId,\n      secretAccessKey: config.secretAccessKey,\n    },\n    region: config.region,\n    ...(config.forcePathStyle ? { forcePathStyle: config.forcePathStyle } : {}),\n    ...(config.endpoint ? { endpoint: config.endpoint } : {}),\n  });\n\n  return client;\n}","import { v4 as uuidv4 } from 'uuid';\n\nexport const uuid = () => uuidv4();\n\nconst SAFE_CHARACTERS = /[^0-9a-zA-Z!_\\\\.\\\\*'\\\\(\\\\)\\\\\\-/]/g;\nexport const sanitizeKey = (value: string) =>\n  value.replace(SAFE_CHARACTERS, ' ').replace(/\\s+/g, '-');","import { NextRequest, NextResponse } from \"next/server\";\nimport { PutObjectCommand } from '@aws-sdk/client-s3';\nimport { S3Config } from '../../../../utils/config';\nimport { getClient } from '../../../../utils/client';\nimport { sanitizeKey, uuid } from '../../../../utils/keys';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport {\n  STSClient,\n  GetFederationTokenCommand,\n  STSClientConfig,\n} from '@aws-sdk/client-sts';\n\n\ntype Options = S3Config & {\n  key?: (request: Request, filename: string) => string | Promise<string>;\n};\n\ntype OptionsFetcher = (request: NextRequest) => Promise<Options>;\n\nconst makeRouteHandler = (optionsFetcher?: OptionsFetcher) => {\n  const route = async function (request: NextRequest) {    \n    const { strategy, filename, filetype } = await request.json();\nconsole.log('filetype: ', filetype)\n    if (!optionsFetcher) {\n      return new Response(\"S3 Upload: Missing config\", { status: 400 })\n    }\n\n    const options = await optionsFetcher(request);\n    if (!options) {\n      return new Response(\"S3 Upload: No config fetched\", { status: 400 })\n    }\n\n    const key = options.key ? await Promise.resolve(options.key(request, filename)) : `uploads/${uuid()}/${sanitizeKey(filename)}`;\n    let { bucket, region, endpoint } = options;\n\n    if (strategy === 'presigned') {\n      const client = getClient(options);\n  \n      const params = {\n        Bucket: bucket,\n        Key: key,\n        ContentType: filetype,\n        CacheControl: 'max-age=630720000',\n      }\n\n      const url = await getSignedUrl(client, new PutObjectCommand(params), {\n        expiresIn: 60 * 60,\n      });\n\n      return NextResponse.json({\n        key,\n        bucket,\n        region,\n        endpoint,\n        url,\n      });\n    } else {\n      let stsConfig: STSClientConfig = {\n        credentials: {\n          accessKeyId: options.accessKeyId,\n          secretAccessKey: options.secretAccessKey,\n        },\n        region,\n      };\n\n      const policy = {\n        Statement: [\n          {\n            Sid: 'Stmt1S3UploadAssets',\n            Effect: 'Allow',\n            Action: ['s3:PutObject'],\n            Resource: [`arn:aws:s3:::${bucket}/${key}`],\n          },\n        ],\n      };\n\n      const sts = new STSClient(stsConfig);\n\n      const command = new GetFederationTokenCommand({\n        Name: 'S3UploadWebToken',\n        Policy: JSON.stringify(policy),\n        DurationSeconds: 60 * 60, // 1 hour\n      });\n\n      const token = await sts.send(command);\n\n      return NextResponse.json({\n        token,\n        key,\n        bucket,\n        region,\n      });\n    }\n  }\n\n  let configure = (optionsFetcher: OptionsFetcher) => makeRouteHandler(optionsFetcher);\n  return Object.assign(route, { configure })\n}\n\nconst APIRoute = makeRouteHandler();\nexport { APIRoute }\n","import React, { ChangeEvent, InputHTMLAttributes } from 'react';\nimport { forwardRef } from 'react';\n\ntype FileInputProps = {\n  onChange: (\n    file: File | undefined,\n    event: ChangeEvent<HTMLInputElement>\n  ) => void;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nexport const FileInput = forwardRef<HTMLInputElement, FileInputProps>(\n  ({ onChange = () => {}, ...restOfProps }, forwardedRef) => {\n    let handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n      let file = event.target?.files?.[0];\n      onChange(file, event);\n    };\n\n    return (\n      <input\n        onChange={handleChange}\n        {...restOfProps}\n        ref={forwardedRef}\n        type=\"file\"\n      />\n    );\n  }\n);","import { useUploadFiles } from './use-upload-files';\n\ntype UploadResult = {\n  url: string;\n  bucket: string;\n  key: string;\n};\n\ntype RequestOptions = {\n  url?: string;\n  body?: Record<string, any>;\n  headers?: HeadersInit;\n};\n\ntype UploadToS3Options = {\n  endpoint?: {\n    request: RequestOptions;\n  };\n};\n\n// Outdated options we no longer want support.\ntype OldOptions = {\n  endpoint: string;\n};\n\ntype Strategy = 'presigned' | 'aws-sdk';\n\nexport type Uploader<P = any> = (\n  file: File,\n  params: P,\n  eventHandlers: {\n    onProgress: (uploaded: number) => void;\n  }\n) => Promise<UploadResult>;\n\nexport const useUploader = (\n  strategy: Strategy,\n  uploader: Uploader,\n  oldOptions?: OldOptions\n) => {\n  let {\n    addFile,\n    updateFileProgress,\n    FileInput,\n    openFileDialog,\n    files,\n    resetFiles,\n  } = useUploadFiles();\n\n  let uploadToS3 = async (file: File, options: UploadToS3Options = {}) => {\n    // combine old options and new options. remove after 1.0\n    if (oldOptions?.endpoint) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          '[Next S3 Upload] The `endpoint` option has been replaced by `endpoint.request.url`. For more information see: https://next-s3-upload.codingvalue.com/changes/endpoint'\n        );\n      }\n\n      if (options.endpoint) {\n        options.endpoint.request.url = oldOptions.endpoint;\n      } else {\n        options.endpoint = {\n          request: {\n            url: oldOptions.endpoint,\n          },\n        };\n      }\n    }\n\n    const params = await getUploadParams(\n      strategy,\n      file,\n      options.endpoint?.request\n    );\n\n    if (params.error) {\n      console.error(params.error);\n      throw params.error;\n    }\n\n    addFile(file);\n\n    const result = await uploader(file, params, {\n      onProgress: uploaded => updateFileProgress(file, uploaded),\n    });\n\n    return result;\n  };\n\n  return {\n    FileInput,\n    openFileDialog,\n    uploadToS3,\n    files,\n    resetFiles,\n  };\n};\n\nlet getUploadParams = async (\n  strategy: Strategy,\n  file: File,\n  requestOptions?: RequestOptions\n) => {\n  let additionalBody = requestOptions?.body ?? {};\n  let additionalHeaders = requestOptions?.headers ?? {};\n  let apiRouteUrl = requestOptions?.url ?? '/api/upload/s3';\n\n  let body = {\n    filename: file.name,\n    filetype: file.type,\n    strategy,\n    ...additionalBody,\n  };\n\n  let headers = {\n    ...additionalHeaders,\n    'Content-Type': 'application/json',\n  };\n\n  let res = await fetch(apiRouteUrl, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n\n  return await res.json();\n};","import React from 'react';\nimport { FileInput } from '../components/FileInput';\nimport { useRef, useState } from 'react';\n\ntype TrackedFile = {\n  file: File;\n  progress: number;\n  uploaded: number;\n  size: number;\n};\n\nexport const useUploadFiles = () => {\n  let ref = useRef<HTMLInputElement>();\n  let [files, setFiles] = useState<TrackedFile[]>([]);\n\n  let openFileDialog = () => {\n    if (ref.current) {\n      ref.current.value = '';\n      ref.current?.click();\n    }\n  };\n\n  let resetFiles = () => {\n    setFiles([]);\n  };\n\n  let updateFileProgress = (file: File, uploaded: number) => {\n    setFiles(files =>\n      files.map(trackedFile =>\n        trackedFile.file === file\n          ? {\n              file,\n              uploaded,\n              size: file.size,\n              progress: file.size ? (uploaded / file.size) * 100 : 0,\n            }\n          : trackedFile\n      )\n    );\n  };\n\n  let addFile = (file: File) => {\n    setFiles(files => [\n      ...files,\n      { file, progress: 0, uploaded: 0, size: file.size },\n    ]);\n  };\n\n  return {\n    FileInput: (props: any) => (\n      <FileInput {...props} ref={ref} style={{ display: 'none' }} />\n    ),\n    openFileDialog,\n    files,\n    addFile,\n    updateFileProgress,\n    resetFiles,\n  };\n};","import {\n  CompleteMultipartUploadCommandOutput,\n  S3Client,\n} from '@aws-sdk/client-s3';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { Uploader, useUploader } from './use-uploader';\n\ntype Params = {\n  key: string;\n  bucket: string;\n  token: Record<string, any>;\n  region: string;\n};\n\nlet upload: Uploader<Params> = async (file, params, { onProgress }) => {\n  let { key, bucket, token, region } = params;\n\n  let client = new S3Client({\n    credentials: {\n      accessKeyId: token.Credentials.AccessKeyId,\n      secretAccessKey: token.Credentials.SecretAccessKey,\n      sessionToken: token.Credentials.SessionToken,\n    },\n    region: region,\n  });\n\n  let uploadParams = {\n    Bucket: bucket,\n    Key: key,\n    Body: file,\n    CacheControl: 'max-age=630720000, public',\n    ContentType: file.type,\n  };\n\n  // at some point make this configurable\n  // let uploadOptions = {\n  //   partSize: 100 * 1024 * 1024,\n  //   queueSize: 1,\n  // };\n\n  let s3Upload = new Upload({\n    client,\n    params: uploadParams,\n  });\n\n  s3Upload.on('httpUploadProgress', progress => {\n    let uploaded = progress.loaded ?? 0;\n    onProgress(uploaded);\n  });\n\n  let uploadResult = (await s3Upload.done()) as CompleteMultipartUploadCommandOutput;\n\n  let url =\n    uploadResult.Bucket && uploadResult.Key\n      ? `https://${uploadResult.Bucket}.s3.${region}.amazonaws.com/${uploadResult.Key}`\n      : '';\n\n  return {\n    url,\n    bucket: uploadResult.Bucket ?? '',\n    key: uploadResult.Key ?? '',\n  };\n};\n\nexport const useS3Upload = (options?: { endpoint: string }) => {\n  let hook = useUploader('aws-sdk', upload, options);\n  return hook;\n};","import { Uploader, useUploader } from './use-uploader';\n\nlet upload: Uploader = async (file, params, { onProgress }) => {\n  let { url, key, bucket, region, endpoint } = params;\n  let buffer = await file.arrayBuffer();\n\n  await new Promise<void>((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n\n    xhr.upload.onprogress = (event: ProgressEvent) => {\n      onProgress(event.loaded);\n    };\n\n    xhr.open('PUT', url, true);\n    xhr.setRequestHeader('Content-Type', file.type);\n    xhr.setRequestHeader('Cache-Control', 'max-age=630720000');\n\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve();\n        } else {\n          reject();\n        }\n      }\n    };\n\n    xhr.send(buffer);\n  });\n\n  let resultUrl = endpoint\n    ? `${endpoint}/${bucket}/${key}`\n    : `https://${bucket}.s3.${region}.amazonaws.com/${key}`;\n\n  return {\n    url: resultUrl,\n    bucket,\n    key,\n  };\n};\n\nexport const usePresignedUpload = () => {\n  let hook = useUploader('presigned', upload);\n  return hook;\n};","import { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { GetObjectCommand } from '@aws-sdk/client-s3';\nimport { S3Config } from './config';\nimport { getClient } from './client';\n\nexport const generateTemporaryUrl = async (\n  key: string,\n  config: S3Config\n) => {\n  let client = getClient(config);\n\n  let command = new GetObjectCommand({\n    Bucket: config.bucket,\n    Key: key,\n  });\n\n  let url = await getSignedUrl(client, command, { expiresIn: 3600 });\n\n  return url;\n};","interface ImageData {\n  height: number | undefined;\n  width: number | undefined;\n}\n\nexport const getImageData = (file: File | Blob): Promise<ImageData> => {\n  return new Promise(resolve => {\n    if (file.type.split('/')?.[0] === 'image') {\n      let img = new Image();\n      let objectUrl = URL.createObjectURL(file);\n      img.onload = (event: Event) => {\n        let image = event.target as HTMLImageElement;\n        resolve({ height: image.height, width: image.width });\n        URL.revokeObjectURL(objectUrl);\n      };\n      img.src = objectUrl;\n    } else {\n      resolve({ height: undefined, width: undefined });\n    }\n  });\n};"],"names":["getClient","config","S3Client","_extends","credentials","accessKeyId","secretAccessKey","region","forcePathStyle","endpoint","uuid","uuidv4","SAFE_CHARACTERS","sanitizeKey","value","replace","APIRoute","makeRouteHandler","optionsFetcher","Object","assign","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","_yield$request$json","strategy","filename","filetype","options","key","bucket","client","params","policy","sts","command","wrap","_context","prev","next","json","sent","console","log","abrupt","Response","status","Promise","resolve","t0","Bucket","Key","ContentType","CacheControl","getSignedUrl","PutObjectCommand","expiresIn","NextResponse","url","Statement","Sid","Effect","Action","Resource","STSClient","GetFederationTokenCommand","Name","Policy","JSON","stringify","DurationSeconds","send","token","stop","_x","apply","arguments","configure","FileInput","forwardRef","forwardedRef","onChange","_ref$onChange","restOfProps","_objectWithoutPropertiesLoose","_excluded","React","event","file","_event$target","target","_event$target$files","files","ref","type","useUploader","uploader","oldOptions","_useState","setFiles","_useUploadFiles","useRef","useState","props","style","display","openFileDialog","_ref$current","current","click","addFile","concat","progress","uploaded","size","updateFileProgress","map","trackedFile","resetFiles","uploadToS3","getUploadParams","_options$endpoint","error","onProgress","_x2","_ref2","_callee2","requestOptions","_requestOptions$body","_requestOptions$heade","_requestOptions$url","additionalBody","additionalHeaders","apiRouteUrl","body","headers","res","_context2","name","Content-Type","fetch","method","_x3","_x4","_x5","upload","_uploadResult$Bucket","_uploadResult$Key","s3Upload","uploadResult","Credentials","AccessKeyId","SecretAccessKey","sessionToken","SessionToken","Upload","Body","on","_progress$loaded","loaded","done","buffer","arrayBuffer","reject","xhr","XMLHttpRequest","onprogress","open","setRequestHeader","onreadystatechange","readyState","generateTemporaryUrl","GetObjectCommand","_file$type$split","split","img","Image","objectUrl","URL","createObjectURL","onload","image","height","width","revokeObjectURL","src","undefined"],"mappings":"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"}